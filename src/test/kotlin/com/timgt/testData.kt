package com.timgt

import com.timgt.battleship.*

val emptyBoard = listOf(
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
)

val boardWithShipHorizontally = listOf(
    Cell(Ship.Destroyer),
    Cell(Ship.Destroyer),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
)

val boardWithShipVertically = listOf(
    Cell(Ship.Destroyer),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(Ship.Destroyer),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
    Cell(),
)

val boardWithAllShips = listOf(
    Cell(Ship.Destroyer), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(Ship.Destroyer), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(Ship.Submarine),
    Cell(), Cell(), Cell(), Cell(), Cell(Ship.Battleship), Cell(Ship.Battleship), Cell(Ship.Battleship), Cell(Ship.Battleship), Cell(), Cell(Ship.Submarine),
    Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(Ship.Submarine),
    Cell(), Cell(Ship.Carrier), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier), Cell(Ship.Cruiser), Cell(Ship.Cruiser), Cell(Ship.Cruiser), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
)

val missedHitBoard = listOf(
    Cell(Ship.Destroyer), Cell(isHit = true), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(Ship.Destroyer), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(Ship.Submarine),
    Cell(), Cell(), Cell(), Cell(), Cell(Ship.Battleship), Cell(Ship.Battleship), Cell(Ship.Battleship), Cell(Ship.Battleship), Cell(), Cell(Ship.Submarine),
    Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(Ship.Submarine),
    Cell(), Cell(Ship.Carrier), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier), Cell(Ship.Cruiser), Cell(Ship.Cruiser), Cell(Ship.Cruiser), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
)

val successHitBoard = listOf(
    Cell(Ship.Destroyer, isHit = true), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(Ship.Destroyer), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(Ship.Submarine),
    Cell(), Cell(), Cell(), Cell(), Cell(Ship.Battleship), Cell(Ship.Battleship), Cell(Ship.Battleship), Cell(Ship.Battleship), Cell(), Cell(Ship.Submarine),
    Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(Ship.Submarine),
    Cell(), Cell(Ship.Carrier), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier), Cell(Ship.Cruiser), Cell(Ship.Cruiser), Cell(Ship.Cruiser), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
)

val successSunkenShipBoard = listOf(
    Cell(Ship.Destroyer, isHit = true), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(Ship.Destroyer, isHit = true), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(Ship.Submarine),
    Cell(), Cell(), Cell(), Cell(), Cell(Ship.Battleship), Cell(Ship.Battleship), Cell(Ship.Battleship), Cell(Ship.Battleship), Cell(), Cell(Ship.Submarine),
    Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(Ship.Submarine),
    Cell(), Cell(Ship.Carrier), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier), Cell(Ship.Cruiser), Cell(Ship.Cruiser), Cell(Ship.Cruiser), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
)

val playerOneWonBoard = listOf(
    Cell(Ship.Destroyer, isHit = true), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(Ship.Destroyer, isHit = true), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(Ship.Submarine, isHit = true),
    Cell(), Cell(), Cell(), Cell(), Cell(Ship.Battleship, isHit = true), Cell(Ship.Battleship, isHit = true), Cell(Ship.Battleship, isHit = true), Cell(Ship.Battleship, isHit = true), Cell(), Cell(Ship.Submarine, isHit = true),
    Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(Ship.Submarine, isHit = true),
    Cell(), Cell(Ship.Carrier, isHit = true), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier, isHit = true), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier, isHit = true), Cell(Ship.Cruiser, isHit = true), Cell(Ship.Cruiser, isHit = true), Cell(Ship.Cruiser, isHit = true), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier, isHit = true), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier, isHit = true), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
)

val playerTwoLostBoard = listOf(
    Cell(Ship.Destroyer, isHit = true), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(Ship.Destroyer, isHit = true), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(Ship.Submarine, isHit = true),
    Cell(), Cell(), Cell(), Cell(), Cell(Ship.Battleship, isHit = true), Cell(Ship.Battleship, isHit = true), Cell(Ship.Battleship, isHit = true), Cell(Ship.Battleship, isHit = true), Cell(), Cell(Ship.Submarine, isHit = true),
    Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(Ship.Submarine, isHit = true),
    Cell(), Cell(Ship.Carrier, isHit = true), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier, isHit = true), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier, isHit = true), Cell(Ship.Cruiser, isHit = true), Cell(Ship.Cruiser, isHit = true), Cell(Ship.Cruiser, isHit = true), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier, isHit = true), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
    Cell(), Cell(Ship.Carrier), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(), Cell(),
)

fun setupBoard() = generateBoard()
    .addShip(Ship.Destroyer, Point('A', 1), Direction.Vertical)
    .addShip(Ship.Submarine, Point('C', 10), Direction.Vertical)
    .addShip(Ship.Cruiser, Point('H', 3), Direction.Horizontal)
    .addShip(Ship.Battleship, Point('D', 5), Direction.Horizontal)
    .addShip(Ship.Carrier, Point('F', 2), Direction.Vertical)

// TODO
// 1. Notify for a sunken ship
// 2. Generate game report